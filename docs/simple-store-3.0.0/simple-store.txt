-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An atomic, durable data store
--   
--   An atomic, durable data store
@package simple-store
@version 3.0.0


-- | SimpleStore consists of a very small api for generating serialization
--   storage that is robust to power pulls. It also has write control
--   locking.
--   
--   SimpleStore works by maintaining a set of 4 files as checkpoints. It
--   cycles through these, writing a new one each time. This means you
--   always have a backup that is closed on disk.
module SimpleStore

-- | Release the file lock and close the handle to the file allowing
--   another processes to open the store
closeSimpleStore :: a -> IO ()

-- | Write the current store to disk in the given folder
createCheckpoint :: (Serialize st) => SimpleStore st -> IO (Either StoreError ())

-- | Write the current store to disk in the given folder immediately
createCheckpointImmediate :: (Serialize st) => SimpleStore st -> IO (Either StoreError ())

-- | Get the current value of the store
getSimpleStore :: SimpleStore st -> IO st

-- | Initialize a simple store from a given filepath and state. The
--   filepath should just be to the directory you want the state created in
--   as in "state"
makeSimpleStore :: (Serialize st) => FilePath -> st -> IO (Either StoreError (SimpleStore st))

-- | Run a function against the state and put the result into the state
--   This does not write the store to disk
modifySimpleStore :: SimpleStore st -> (st -> IO st) -> IO (Either StoreError ())

-- | Open a simple store from a filepath reading in the newest most valid
--   store important to the operation of this is the last.touch file. this
--   file tells openSimpleStore what to try and open first. it is plain
--   text encoded and updated on every checkpoint.
openSimpleStore :: Serialize st => FilePath -> IO (Either StoreError (SimpleStore st))

-- | Attempt to open a store. If the store doesn't it exist it will create
--   the store in the filepath given with makeSimpleStore.
attemptOpenDefault :: (Serialize st) => FilePath -> st -> IO (Either StoreError (SimpleStore st))

-- | Put a new value into a simple store with the lock
putSimpleStore :: SimpleStore st -> st -> IO ()

-- | A SimpleStore will be created at the directory given The storeDir is a
--   filepath to the current active state's backup. The store state is the
--   in-memory representation of the item in storage. The lock is engaged
--   on modify and writes. The checkpoint version says what to increment
--   the next backup to.
data SimpleStore st

-- | All error types for SimpleStore
data StoreError
StoreAlreadyOpen :: StoreError
StoreClosed :: StoreError
StoreLocked :: StoreError
StoreFolderNotFound :: StoreError
StoreFileNotFound :: StoreError
NoStoreFilesInPath :: StoreError
StoreCheckpointNotFound :: StoreError
StoreIOError :: String -> StoreError
